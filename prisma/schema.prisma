generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String             @id @default(cuid())
  name      String             @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  Account   Account?
  Activity  Activity[]
  users     UserOrganization[]
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  passwordHash  String
  role          Role               @default(USER)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  Task          Task[]
  organizations UserOrganization[]
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Account {
  id             String        @id @default(cuid())
  organizationId String        @unique
  accountName    String
  balance        Float         @default(0.0)
  type           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  Transaction    Transaction[]
}

model Transaction {
  id              String          @id @default(cuid())
  accountId       String
  amount          Float
  transactionType TransactionType
  description     String?
  transactionDate DateTime
  transactionCode String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  account         Account         @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model Activity {
  id             String       @id @default(cuid())
  organizationId String
  title          String
  starts_at      DateTime
  ends_at        DateTime
  location       String?
  description    String?
  attendees      String[]     @default([])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PAYMENT
  INCOME
}
